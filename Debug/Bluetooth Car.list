
Bluetooth Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002ed0  08002ed0  00003ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002efc  08002efc  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002efc  08002efc  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002efc  08002efc  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002efc  08002efc  00003efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f00  08002f00  00003f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002f04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000010  08002f14  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002f14  000040ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf91  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbc  00000000  00000000  00010fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00012f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000999  00000000  00000000  00013bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017197  00000000  00000000  00014569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1c1  00000000  00000000  0002b700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000869c5  00000000  00000000  0003a8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1286  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003290  00000000  00000000  000c12cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000c455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002eb8 	.word	0x08002eb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002eb8 	.word	0x08002eb8

0800014c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t data_rx; //Tin hieu nhan ve
uint8_t uart_flag = 0;
uint8_t car_speed = 100;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681a      	ldr	r2, [r3, #0]
 8000158:	4b07      	ldr	r3, [pc, #28]	@ (8000178 <HAL_UART_RxCpltCallback+0x2c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	429a      	cmp	r2, r3
 800015e:	d107      	bne.n	8000170 <HAL_UART_RxCpltCallback+0x24>
	{
		uart_flag = 1;
 8000160:	4b06      	ldr	r3, [pc, #24]	@ (800017c <HAL_UART_RxCpltCallback+0x30>)
 8000162:	2201      	movs	r2, #1
 8000164:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 8000166:	2201      	movs	r2, #1
 8000168:	4905      	ldr	r1, [pc, #20]	@ (8000180 <HAL_UART_RxCpltCallback+0x34>)
 800016a:	4803      	ldr	r0, [pc, #12]	@ (8000178 <HAL_UART_RxCpltCallback+0x2c>)
 800016c:	f001 fffd 	bl	800216a <HAL_UART_Receive_IT>
	}
}
 8000170:	bf00      	nop
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	20000074 	.word	0x20000074
 800017c:	200000bd 	.word	0x200000bd
 8000180:	200000bc 	.word	0x200000bc

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000188:	f000 fb60 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018c:	f000 f8a6 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000190:	f000 f9a0 	bl	80004d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000194:	f000 f8e4 	bl	8000360 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000198:	f000 f972 	bl	8000480 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  car_init(&htim1);
 800019c:	4849      	ldr	r0, [pc, #292]	@ (80002c4 <main+0x140>)
 800019e:	f002 fd7b 	bl	8002c98 <car_init>
  HAL_UART_Receive_IT(&huart1, &data_rx, 1);
 80001a2:	2201      	movs	r2, #1
 80001a4:	4948      	ldr	r1, [pc, #288]	@ (80002c8 <main+0x144>)
 80001a6:	4849      	ldr	r0, [pc, #292]	@ (80002cc <main+0x148>)
 80001a8:	f001 ffdf 	bl	800216a <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (uart_flag)
 80001ac:	4b48      	ldr	r3, [pc, #288]	@ (80002d0 <main+0x14c>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d0fb      	beq.n	80001ac <main+0x28>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ba:	4846      	ldr	r0, [pc, #280]	@ (80002d4 <main+0x150>)
 80001bc:	f000 feec 	bl	8000f98 <HAL_GPIO_WritePin>
//------------------------Disable Xe-----------------------------
		  if (data_rx == 'X')
 80001c0:	4b41      	ldr	r3, [pc, #260]	@ (80002c8 <main+0x144>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b58      	cmp	r3, #88	@ 0x58
 80001c6:	d10e      	bne.n	80001e6 <main+0x62>
		  {
			  while (data_rx != 'x')
 80001c8:	e009      	b.n	80001de <main+0x5a>
			  {
				  car_control(CAR_STOP_STATE, 0);
 80001ca:	2100      	movs	r1, #0
 80001cc:	2000      	movs	r0, #0
 80001ce:	f002 fd03 	bl	8002bd8 <car_control>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80001d2:	2201      	movs	r2, #1
 80001d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001d8:	483e      	ldr	r0, [pc, #248]	@ (80002d4 <main+0x150>)
 80001da:	f000 fedd 	bl	8000f98 <HAL_GPIO_WritePin>
			  while (data_rx != 'x')
 80001de:	4b3a      	ldr	r3, [pc, #232]	@ (80002c8 <main+0x144>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b78      	cmp	r3, #120	@ 0x78
 80001e4:	d1f1      	bne.n	80001ca <main+0x46>
			  }
		  }
//----------------------Dieu khien xe-----------------------------
		  switch(data_rx)
 80001e6:	4b38      	ldr	r3, [pc, #224]	@ (80002c8 <main+0x144>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	3b42      	subs	r3, #66	@ 0x42
 80001ec:	2b11      	cmp	r3, #17
 80001ee:	d848      	bhi.n	8000282 <main+0xfe>
 80001f0:	a201      	add	r2, pc, #4	@ (adr r2, 80001f8 <main+0x74>)
 80001f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f6:	bf00      	nop
 80001f8:	08000259 	.word	0x08000259
 80001fc:	08000283 	.word	0x08000283
 8000200:	08000283 	.word	0x08000283
 8000204:	08000283 	.word	0x08000283
 8000208:	0800024b 	.word	0x0800024b
 800020c:	08000283 	.word	0x08000283
 8000210:	08000283 	.word	0x08000283
 8000214:	08000283 	.word	0x08000283
 8000218:	08000283 	.word	0x08000283
 800021c:	08000283 	.word	0x08000283
 8000220:	08000267 	.word	0x08000267
 8000224:	08000283 	.word	0x08000283
 8000228:	08000283 	.word	0x08000283
 800022c:	08000283 	.word	0x08000283
 8000230:	08000283 	.word	0x08000283
 8000234:	08000283 	.word	0x08000283
 8000238:	08000275 	.word	0x08000275
 800023c:	08000241 	.word	0x08000241
		  {
		  case 'S':
			  car_control(CAR_STOP_STATE, 0);
 8000240:	2100      	movs	r1, #0
 8000242:	2000      	movs	r0, #0
 8000244:	f002 fcc8 	bl	8002bd8 <car_control>
			  break;
 8000248:	e037      	b.n	80002ba <main+0x136>
		  case 'F':
			  car_control(CAR_FORWARD_STATE, car_speed);
 800024a:	4b23      	ldr	r3, [pc, #140]	@ (80002d8 <main+0x154>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	4619      	mov	r1, r3
 8000250:	2001      	movs	r0, #1
 8000252:	f002 fcc1 	bl	8002bd8 <car_control>
			  break;
 8000256:	e030      	b.n	80002ba <main+0x136>
		  case 'B':
			  car_control(CAR_BACKWARD_STATE, car_speed);
 8000258:	4b1f      	ldr	r3, [pc, #124]	@ (80002d8 <main+0x154>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	4619      	mov	r1, r3
 800025e:	2002      	movs	r0, #2
 8000260:	f002 fcba 	bl	8002bd8 <car_control>
			  break;
 8000264:	e029      	b.n	80002ba <main+0x136>
		  case 'L':
			  car_control(CAR_LEFT_STATE, car_speed);
 8000266:	4b1c      	ldr	r3, [pc, #112]	@ (80002d8 <main+0x154>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	4619      	mov	r1, r3
 800026c:	2003      	movs	r0, #3
 800026e:	f002 fcb3 	bl	8002bd8 <car_control>
			  break;
 8000272:	e022      	b.n	80002ba <main+0x136>
		  case 'R':
			  car_control(CAR_RIGHT_STATE, car_speed);
 8000274:	4b18      	ldr	r3, [pc, #96]	@ (80002d8 <main+0x154>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	4619      	mov	r1, r3
 800027a:	2004      	movs	r0, #4
 800027c:	f002 fcac 	bl	8002bd8 <car_control>
			  break;
 8000280:	e01b      	b.n	80002ba <main+0x136>
		  default:
//--------------------------Dieu khien toc do cua xe-------------
			  if (data_rx >= '0' && data_rx <= '9')
 8000282:	4b11      	ldr	r3, [pc, #68]	@ (80002c8 <main+0x144>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b2f      	cmp	r3, #47	@ 0x2f
 8000288:	d90f      	bls.n	80002aa <main+0x126>
 800028a:	4b0f      	ldr	r3, [pc, #60]	@ (80002c8 <main+0x144>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b39      	cmp	r3, #57	@ 0x39
 8000290:	d80b      	bhi.n	80002aa <main+0x126>
			  {
				  car_speed = (data_rx - '0')*10;
 8000292:	4b0d      	ldr	r3, [pc, #52]	@ (80002c8 <main+0x144>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	461a      	mov	r2, r3
 8000298:	0092      	lsls	r2, r2, #2
 800029a:	4413      	add	r3, r2
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	3320      	adds	r3, #32
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <main+0x154>)
 80002a6:	701a      	strb	r2, [r3, #0]
			  }
			  else if (data_rx == 'q')
			  {
				  car_speed = 100;
			  }
			  break;
 80002a8:	e006      	b.n	80002b8 <main+0x134>
			  else if (data_rx == 'q')
 80002aa:	4b07      	ldr	r3, [pc, #28]	@ (80002c8 <main+0x144>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b71      	cmp	r3, #113	@ 0x71
 80002b0:	d102      	bne.n	80002b8 <main+0x134>
				  car_speed = 100;
 80002b2:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <main+0x154>)
 80002b4:	2264      	movs	r2, #100	@ 0x64
 80002b6:	701a      	strb	r2, [r3, #0]
			  break;
 80002b8:	bf00      	nop
		  }

		  uart_flag = 0;
 80002ba:	4b05      	ldr	r3, [pc, #20]	@ (80002d0 <main+0x14c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
	  if (uart_flag)
 80002c0:	e774      	b.n	80001ac <main+0x28>
 80002c2:	bf00      	nop
 80002c4:	2000002c 	.word	0x2000002c
 80002c8:	200000bc 	.word	0x200000bc
 80002cc:	20000074 	.word	0x20000074
 80002d0:	200000bd 	.word	0x200000bd
 80002d4:	40011000 	.word	0x40011000
 80002d8:	20000000 	.word	0x20000000

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b090      	sub	sp, #64	@ 0x40
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 0318 	add.w	r3, r7, #24
 80002e6:	2228      	movs	r2, #40	@ 0x28
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f002 fdb8 	bl	8002e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fe:	2302      	movs	r3, #2
 8000300:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000302:	2301      	movs	r3, #1
 8000304:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000306:	2310      	movs	r3, #16
 8000308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	2302      	movs	r3, #2
 800030c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800030e:	2300      	movs	r3, #0
 8000310:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000312:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fe53 	bl	8000fc8 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000328:	f000 f942 	bl	80005b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2302      	movs	r3, #2
 8000332:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800033c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f001 f8c0 	bl	80014cc <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000352:	f000 f92d 	bl	80005b0 <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3740      	adds	r7, #64	@ 0x40
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b092      	sub	sp, #72	@ 0x48
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000366:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
 8000380:	615a      	str	r2, [r3, #20]
 8000382:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2220      	movs	r2, #32
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f002 fd68 	bl	8002e60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000390:	4b39      	ldr	r3, [pc, #228]	@ (8000478 <MX_TIM1_Init+0x118>)
 8000392:	4a3a      	ldr	r2, [pc, #232]	@ (800047c <MX_TIM1_Init+0x11c>)
 8000394:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000396:	4b38      	ldr	r3, [pc, #224]	@ (8000478 <MX_TIM1_Init+0x118>)
 8000398:	223f      	movs	r2, #63	@ 0x3f
 800039a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039c:	4b36      	ldr	r3, [pc, #216]	@ (8000478 <MX_TIM1_Init+0x118>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80003a2:	4b35      	ldr	r3, [pc, #212]	@ (8000478 <MX_TIM1_Init+0x118>)
 80003a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003aa:	4b33      	ldr	r3, [pc, #204]	@ (8000478 <MX_TIM1_Init+0x118>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003b0:	4b31      	ldr	r3, [pc, #196]	@ (8000478 <MX_TIM1_Init+0x118>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b6:	4b30      	ldr	r3, [pc, #192]	@ (8000478 <MX_TIM1_Init+0x118>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003bc:	482e      	ldr	r0, [pc, #184]	@ (8000478 <MX_TIM1_Init+0x118>)
 80003be:	f001 fa13 	bl	80017e8 <HAL_TIM_PWM_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80003c8:	f000 f8f2 	bl	80005b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003cc:	2300      	movs	r3, #0
 80003ce:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80003d8:	4619      	mov	r1, r3
 80003da:	4827      	ldr	r0, [pc, #156]	@ (8000478 <MX_TIM1_Init+0x118>)
 80003dc:	f001 fdc6 	bl	8001f6c <HAL_TIMEx_MasterConfigSynchronization>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80003e6:	f000 f8e3 	bl	80005b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ea:	2360      	movs	r3, #96	@ 0x60
 80003ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f2:	2300      	movs	r3, #0
 80003f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003f6:	2300      	movs	r3, #0
 80003f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003fa:	2300      	movs	r3, #0
 80003fc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000402:	2300      	movs	r3, #0
 8000404:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800040a:	2200      	movs	r2, #0
 800040c:	4619      	mov	r1, r3
 800040e:	481a      	ldr	r0, [pc, #104]	@ (8000478 <MX_TIM1_Init+0x118>)
 8000410:	f001 fadc 	bl	80019cc <HAL_TIM_PWM_ConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800041a:	f000 f8c9 	bl	80005b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800041e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000422:	2204      	movs	r2, #4
 8000424:	4619      	mov	r1, r3
 8000426:	4814      	ldr	r0, [pc, #80]	@ (8000478 <MX_TIM1_Init+0x118>)
 8000428:	f001 fad0 	bl	80019cc <HAL_TIM_PWM_ConfigChannel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000432:	f000 f8bd 	bl	80005b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800044a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800044e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000450:	2300      	movs	r3, #0
 8000452:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	4619      	mov	r1, r3
 8000458:	4807      	ldr	r0, [pc, #28]	@ (8000478 <MX_TIM1_Init+0x118>)
 800045a:	f001 fde5 	bl	8002028 <HAL_TIMEx_ConfigBreakDeadTime>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000464:	f000 f8a4 	bl	80005b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000468:	4803      	ldr	r0, [pc, #12]	@ (8000478 <MX_TIM1_Init+0x118>)
 800046a:	f000 f8f7 	bl	800065c <HAL_TIM_MspPostInit>

}
 800046e:	bf00      	nop
 8000470:	3748      	adds	r7, #72	@ 0x48
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	2000002c 	.word	0x2000002c
 800047c:	40012c00 	.word	0x40012c00

08000480 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000484:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 8000486:	4a12      	ldr	r2, [pc, #72]	@ (80004d0 <MX_USART1_UART_Init+0x50>)
 8000488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800048a:	4b10      	ldr	r3, [pc, #64]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 800048c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000498:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004a4:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 80004a6:	220c      	movs	r2, #12
 80004a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 80004b8:	f001 fe07 	bl	80020ca <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004c2:	f000 f875 	bl	80005b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000074 	.word	0x20000074
 80004d0:	40013800 	.word	0x40013800

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e8:	4b2e      	ldr	r3, [pc, #184]	@ (80005a4 <MX_GPIO_Init+0xd0>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a2d      	ldr	r2, [pc, #180]	@ (80005a4 <MX_GPIO_Init+0xd0>)
 80004ee:	f043 0310 	orr.w	r3, r3, #16
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b2b      	ldr	r3, [pc, #172]	@ (80005a4 <MX_GPIO_Init+0xd0>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000500:	4b28      	ldr	r3, [pc, #160]	@ (80005a4 <MX_GPIO_Init+0xd0>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a27      	ldr	r2, [pc, #156]	@ (80005a4 <MX_GPIO_Init+0xd0>)
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b25      	ldr	r3, [pc, #148]	@ (80005a4 <MX_GPIO_Init+0xd0>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0320 	and.w	r3, r3, #32
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000518:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <MX_GPIO_Init+0xd0>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a21      	ldr	r2, [pc, #132]	@ (80005a4 <MX_GPIO_Init+0xd0>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b1f      	ldr	r3, [pc, #124]	@ (80005a4 <MX_GPIO_Init+0xd0>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0308 	and.w	r3, r3, #8
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	4b1c      	ldr	r3, [pc, #112]	@ (80005a4 <MX_GPIO_Init+0xd0>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a1b      	ldr	r2, [pc, #108]	@ (80005a4 <MX_GPIO_Init+0xd0>)
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <MX_GPIO_Init+0xd0>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0304 	and.w	r3, r3, #4
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800054e:	4816      	ldr	r0, [pc, #88]	@ (80005a8 <MX_GPIO_Init+0xd4>)
 8000550:	f000 fd22 	bl	8000f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR1_IO_Pin|MOTOR2_IO_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800055a:	4814      	ldr	r0, [pc, #80]	@ (80005ac <MX_GPIO_Init+0xd8>)
 800055c:	f000 fd1c 	bl	8000f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2302      	movs	r3, #2
 8000570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000572:	f107 0310 	add.w	r3, r7, #16
 8000576:	4619      	mov	r1, r3
 8000578:	480b      	ldr	r0, [pc, #44]	@ (80005a8 <MX_GPIO_Init+0xd4>)
 800057a:	f000 fb89 	bl	8000c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR1_IO_Pin MOTOR2_IO_Pin */
  GPIO_InitStruct.Pin = MOTOR1_IO_Pin|MOTOR2_IO_Pin;
 800057e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2302      	movs	r3, #2
 800058e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	4805      	ldr	r0, [pc, #20]	@ (80005ac <MX_GPIO_Init+0xd8>)
 8000598:	f000 fb7a 	bl	8000c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40011000 	.word	0x40011000
 80005ac:	40010c00 	.word	0x40010c00

080005b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b4:	b672      	cpsid	i
}
 80005b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <Error_Handler+0x8>

080005bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005c2:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <HAL_MspInit+0x5c>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	4a14      	ldr	r2, [pc, #80]	@ (8000618 <HAL_MspInit+0x5c>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6193      	str	r3, [r2, #24]
 80005ce:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_MspInit+0x5c>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <HAL_MspInit+0x5c>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <HAL_MspInit+0x5c>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <HAL_MspInit+0x5c>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <HAL_MspInit+0x60>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	4a04      	ldr	r2, [pc, #16]	@ (800061c <HAL_MspInit+0x60>)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	40021000 	.word	0x40021000
 800061c:	40010000 	.word	0x40010000

08000620 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a09      	ldr	r2, [pc, #36]	@ (8000654 <HAL_TIM_PWM_MspInit+0x34>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d10b      	bne.n	800064a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <HAL_TIM_PWM_MspInit+0x38>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a08      	ldr	r2, [pc, #32]	@ (8000658 <HAL_TIM_PWM_MspInit+0x38>)
 8000638:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <HAL_TIM_PWM_MspInit+0x38>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40012c00 	.word	0x40012c00
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a10      	ldr	r2, [pc, #64]	@ (80006b8 <HAL_TIM_MspPostInit+0x5c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d118      	bne.n	80006ae <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <HAL_TIM_MspPostInit+0x60>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <HAL_TIM_MspPostInit+0x60>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <HAL_TIM_MspPostInit+0x60>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0304 	and.w	r3, r3, #4
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin;
 8000694:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000698:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <HAL_TIM_MspPostInit+0x64>)
 80006aa:	f000 faf1 	bl	8000c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80006ae:	bf00      	nop
 80006b0:	3720      	adds	r7, #32
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40012c00 	.word	0x40012c00
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010800 	.word	0x40010800

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	@ 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a26      	ldr	r2, [pc, #152]	@ (8000778 <HAL_UART_MspInit+0xb4>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d145      	bne.n	8000770 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e4:	4b25      	ldr	r3, [pc, #148]	@ (800077c <HAL_UART_MspInit+0xb8>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a24      	ldr	r2, [pc, #144]	@ (800077c <HAL_UART_MspInit+0xb8>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b22      	ldr	r3, [pc, #136]	@ (800077c <HAL_UART_MspInit+0xb8>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <HAL_UART_MspInit+0xb8>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a1e      	ldr	r2, [pc, #120]	@ (800077c <HAL_UART_MspInit+0xb8>)
 8000702:	f043 0308 	orr.w	r3, r3, #8
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <HAL_UART_MspInit+0xb8>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0308 	and.w	r3, r3, #8
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000714:	2340      	movs	r3, #64	@ 0x40
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	4816      	ldr	r0, [pc, #88]	@ (8000780 <HAL_UART_MspInit+0xbc>)
 8000728:	f000 fab2 	bl	8000c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800072c:	2380      	movs	r3, #128	@ 0x80
 800072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	4810      	ldr	r0, [pc, #64]	@ (8000780 <HAL_UART_MspInit+0xbc>)
 8000740:	f000 faa6 	bl	8000c90 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <HAL_UART_MspInit+0xc0>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
 800074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
 8000752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <HAL_UART_MspInit+0xc0>)
 800075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075e:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	2025      	movs	r0, #37	@ 0x25
 8000766:	f000 f9aa 	bl	8000abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800076a:	2025      	movs	r0, #37	@ 0x25
 800076c:	f000 f9c3 	bl	8000af6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40013800 	.word	0x40013800
 800077c:	40021000 	.word	0x40021000
 8000780:	40010c00 	.word	0x40010c00
 8000784:	40010000 	.word	0x40010000

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <NMI_Handler+0x4>

08000790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <MemManage_Handler+0x4>

080007a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <UsageFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d8:	f000 f87e 	bl	80008d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007e4:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <USART1_IRQHandler+0x10>)
 80007e6:	f001 fce5 	bl	80021b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000074 	.word	0x20000074

080007f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000800:	f7ff fff8 	bl	80007f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000804:	480b      	ldr	r0, [pc, #44]	@ (8000834 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000806:	490c      	ldr	r1, [pc, #48]	@ (8000838 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000808:	4a0c      	ldr	r2, [pc, #48]	@ (800083c <LoopFillZerobss+0x16>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800080c:	e002      	b.n	8000814 <LoopCopyDataInit>

0800080e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000812:	3304      	adds	r3, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000818:	d3f9      	bcc.n	800080e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081a:	4a09      	ldr	r2, [pc, #36]	@ (8000840 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800081c:	4c09      	ldr	r4, [pc, #36]	@ (8000844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000820:	e001      	b.n	8000826 <LoopFillZerobss>

08000822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000824:	3204      	adds	r2, #4

08000826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000828:	d3fb      	bcc.n	8000822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800082a:	f002 fb21 	bl	8002e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082e:	f7ff fca9 	bl	8000184 <main>
  bx lr
 8000832:	4770      	bx	lr
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800083c:	08002f04 	.word	0x08002f04
  ldr r2, =_sbss
 8000840:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000844:	200000ec 	.word	0x200000ec

08000848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_2_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <HAL_Init+0x28>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <HAL_Init+0x28>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f923 	bl	8000aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000862:	200f      	movs	r0, #15
 8000864:	f000 f808 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff fea8 	bl	80005bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40022000 	.word	0x40022000

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <HAL_InitTick+0x54>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_InitTick+0x58>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000892:	fbb2 f3f3 	udiv	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f93b 	bl	8000b12 <HAL_SYSTICK_Config>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00e      	b.n	80008c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d80a      	bhi.n	80008c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f000 f903 	bl	8000abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b8:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <HAL_InitTick+0x5c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000004 	.word	0x20000004
 80008d0:	2000000c 	.word	0x2000000c
 80008d4:	20000008 	.word	0x20000008

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <HAL_IncTick+0x1c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_IncTick+0x20>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a03      	ldr	r2, [pc, #12]	@ (80008f8 <HAL_IncTick+0x20>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	2000000c 	.word	0x2000000c
 80008f8:	200000c0 	.word	0x200000c0

080008fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b02      	ldr	r3, [pc, #8]	@ (800090c <HAL_GetTick+0x10>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	200000c0 	.word	0x200000c0

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	db0b      	blt.n	800099e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f003 021f 	and.w	r2, r3, #31
 800098c:	4906      	ldr	r1, [pc, #24]	@ (80009a8 <__NVIC_EnableIRQ+0x34>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	095b      	lsrs	r3, r3, #5
 8000994:	2001      	movs	r0, #1
 8000996:	fa00 f202 	lsl.w	r2, r0, r2
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100

080009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db0a      	blt.n	80009d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	490c      	ldr	r1, [pc, #48]	@ (80009f8 <__NVIC_SetPriority+0x4c>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	0112      	lsls	r2, r2, #4
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d4:	e00a      	b.n	80009ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4908      	ldr	r1, [pc, #32]	@ (80009fc <__NVIC_SetPriority+0x50>)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	3b04      	subs	r3, #4
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	440b      	add	r3, r1
 80009ea:	761a      	strb	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b089      	sub	sp, #36	@ 0x24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f1c3 0307 	rsb	r3, r3, #7
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	bf28      	it	cs
 8000a1e:	2304      	movcs	r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3304      	adds	r3, #4
 8000a26:	2b06      	cmp	r3, #6
 8000a28:	d902      	bls.n	8000a30 <NVIC_EncodePriority+0x30>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	e000      	b.n	8000a32 <NVIC_EncodePriority+0x32>
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43d9      	mvns	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	4313      	orrs	r3, r2
         );
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	@ 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a74:	d301      	bcc.n	8000a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00f      	b.n	8000a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <SysTick_Config+0x40>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a82:	210f      	movs	r1, #15
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f7ff ff90 	bl	80009ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a8c:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <SysTick_Config+0x40>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a92:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <SysTick_Config+0x40>)
 8000a94:	2207      	movs	r2, #7
 8000a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	e000e010 	.word	0xe000e010

08000aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff2d 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad0:	f7ff ff42 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	6978      	ldr	r0, [r7, #20]
 8000adc:	f7ff ff90 	bl	8000a00 <NVIC_EncodePriority>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff5f 	bl	80009ac <__NVIC_SetPriority>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff35 	bl	8000974 <__NVIC_EnableIRQ>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffa2 	bl	8000a64 <SysTick_Config>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b085      	sub	sp, #20
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d008      	beq.n	8000b54 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2204      	movs	r2, #4
 8000b46:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e020      	b.n	8000b96 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 020e 	bic.w	r2, r2, #14
 8000b62:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0201 	bic.w	r2, r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b82:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2201      	movs	r2, #1
 8000b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d005      	beq.n	8000bc4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2204      	movs	r2, #4
 8000bbc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e051      	b.n	8000c68 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 020e 	bic.w	r2, r2, #14
 8000bd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0201 	bic.w	r2, r2, #1
 8000be2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a22      	ldr	r2, [pc, #136]	@ (8000c74 <HAL_DMA_Abort_IT+0xd4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d029      	beq.n	8000c42 <HAL_DMA_Abort_IT+0xa2>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a21      	ldr	r2, [pc, #132]	@ (8000c78 <HAL_DMA_Abort_IT+0xd8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d022      	beq.n	8000c3e <HAL_DMA_Abort_IT+0x9e>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8000c7c <HAL_DMA_Abort_IT+0xdc>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d01a      	beq.n	8000c38 <HAL_DMA_Abort_IT+0x98>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1e      	ldr	r2, [pc, #120]	@ (8000c80 <HAL_DMA_Abort_IT+0xe0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d012      	beq.n	8000c32 <HAL_DMA_Abort_IT+0x92>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1c      	ldr	r2, [pc, #112]	@ (8000c84 <HAL_DMA_Abort_IT+0xe4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d00a      	beq.n	8000c2c <HAL_DMA_Abort_IT+0x8c>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c88 <HAL_DMA_Abort_IT+0xe8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d102      	bne.n	8000c26 <HAL_DMA_Abort_IT+0x86>
 8000c20:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c24:	e00e      	b.n	8000c44 <HAL_DMA_Abort_IT+0xa4>
 8000c26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c2a:	e00b      	b.n	8000c44 <HAL_DMA_Abort_IT+0xa4>
 8000c2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c30:	e008      	b.n	8000c44 <HAL_DMA_Abort_IT+0xa4>
 8000c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c36:	e005      	b.n	8000c44 <HAL_DMA_Abort_IT+0xa4>
 8000c38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c3c:	e002      	b.n	8000c44 <HAL_DMA_Abort_IT+0xa4>
 8000c3e:	2310      	movs	r3, #16
 8000c40:	e000      	b.n	8000c44 <HAL_DMA_Abort_IT+0xa4>
 8000c42:	2301      	movs	r3, #1
 8000c44:	4a11      	ldr	r2, [pc, #68]	@ (8000c8c <HAL_DMA_Abort_IT+0xec>)
 8000c46:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	4798      	blx	r3
    } 
  }
  return status;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40020008 	.word	0x40020008
 8000c78:	4002001c 	.word	0x4002001c
 8000c7c:	40020030 	.word	0x40020030
 8000c80:	40020044 	.word	0x40020044
 8000c84:	40020058 	.word	0x40020058
 8000c88:	4002006c 	.word	0x4002006c
 8000c8c:	40020000 	.word	0x40020000

08000c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b08b      	sub	sp, #44	@ 0x2c
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca2:	e169      	b.n	8000f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	f040 8158 	bne.w	8000f72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	4a9a      	ldr	r2, [pc, #616]	@ (8000f30 <HAL_GPIO_Init+0x2a0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d05e      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000ccc:	4a98      	ldr	r2, [pc, #608]	@ (8000f30 <HAL_GPIO_Init+0x2a0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d875      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cd2:	4a98      	ldr	r2, [pc, #608]	@ (8000f34 <HAL_GPIO_Init+0x2a4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d058      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000cd8:	4a96      	ldr	r2, [pc, #600]	@ (8000f34 <HAL_GPIO_Init+0x2a4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d86f      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cde:	4a96      	ldr	r2, [pc, #600]	@ (8000f38 <HAL_GPIO_Init+0x2a8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d052      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000ce4:	4a94      	ldr	r2, [pc, #592]	@ (8000f38 <HAL_GPIO_Init+0x2a8>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d869      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cea:	4a94      	ldr	r2, [pc, #592]	@ (8000f3c <HAL_GPIO_Init+0x2ac>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d04c      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000cf0:	4a92      	ldr	r2, [pc, #584]	@ (8000f3c <HAL_GPIO_Init+0x2ac>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d863      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cf6:	4a92      	ldr	r2, [pc, #584]	@ (8000f40 <HAL_GPIO_Init+0x2b0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d046      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000cfc:	4a90      	ldr	r2, [pc, #576]	@ (8000f40 <HAL_GPIO_Init+0x2b0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d85d      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000d02:	2b12      	cmp	r3, #18
 8000d04:	d82a      	bhi.n	8000d5c <HAL_GPIO_Init+0xcc>
 8000d06:	2b12      	cmp	r3, #18
 8000d08:	d859      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d10 <HAL_GPIO_Init+0x80>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	08000d8b 	.word	0x08000d8b
 8000d14:	08000d65 	.word	0x08000d65
 8000d18:	08000d77 	.word	0x08000d77
 8000d1c:	08000db9 	.word	0x08000db9
 8000d20:	08000dbf 	.word	0x08000dbf
 8000d24:	08000dbf 	.word	0x08000dbf
 8000d28:	08000dbf 	.word	0x08000dbf
 8000d2c:	08000dbf 	.word	0x08000dbf
 8000d30:	08000dbf 	.word	0x08000dbf
 8000d34:	08000dbf 	.word	0x08000dbf
 8000d38:	08000dbf 	.word	0x08000dbf
 8000d3c:	08000dbf 	.word	0x08000dbf
 8000d40:	08000dbf 	.word	0x08000dbf
 8000d44:	08000dbf 	.word	0x08000dbf
 8000d48:	08000dbf 	.word	0x08000dbf
 8000d4c:	08000dbf 	.word	0x08000dbf
 8000d50:	08000dbf 	.word	0x08000dbf
 8000d54:	08000d6d 	.word	0x08000d6d
 8000d58:	08000d81 	.word	0x08000d81
 8000d5c:	4a79      	ldr	r2, [pc, #484]	@ (8000f44 <HAL_GPIO_Init+0x2b4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d62:	e02c      	b.n	8000dbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	623b      	str	r3, [r7, #32]
          break;
 8000d6a:	e029      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	3304      	adds	r3, #4
 8000d72:	623b      	str	r3, [r7, #32]
          break;
 8000d74:	e024      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	3308      	adds	r3, #8
 8000d7c:	623b      	str	r3, [r7, #32]
          break;
 8000d7e:	e01f      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	330c      	adds	r3, #12
 8000d86:	623b      	str	r3, [r7, #32]
          break;
 8000d88:	e01a      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d92:	2304      	movs	r3, #4
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e013      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d105      	bne.n	8000dac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da0:	2308      	movs	r3, #8
 8000da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	611a      	str	r2, [r3, #16]
          break;
 8000daa:	e009      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dac:	2308      	movs	r3, #8
 8000dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69fa      	ldr	r2, [r7, #28]
 8000db4:	615a      	str	r2, [r3, #20]
          break;
 8000db6:	e003      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
          break;
 8000dbc:	e000      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          break;
 8000dbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2bff      	cmp	r3, #255	@ 0xff
 8000dc4:	d801      	bhi.n	8000dca <HAL_GPIO_Init+0x13a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	e001      	b.n	8000dce <HAL_GPIO_Init+0x13e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	2bff      	cmp	r3, #255	@ 0xff
 8000dd4:	d802      	bhi.n	8000ddc <HAL_GPIO_Init+0x14c>
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	e002      	b.n	8000de2 <HAL_GPIO_Init+0x152>
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	3b08      	subs	r3, #8
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	210f      	movs	r1, #15
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	401a      	ands	r2, r3
 8000df4:	6a39      	ldr	r1, [r7, #32]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 80b1 	beq.w	8000f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e10:	4b4d      	ldr	r3, [pc, #308]	@ (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a4c      	ldr	r2, [pc, #304]	@ (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e28:	4a48      	ldr	r2, [pc, #288]	@ (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a40      	ldr	r2, [pc, #256]	@ (8000f50 <HAL_GPIO_Init+0x2c0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d013      	beq.n	8000e7c <HAL_GPIO_Init+0x1ec>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a3f      	ldr	r2, [pc, #252]	@ (8000f54 <HAL_GPIO_Init+0x2c4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d00d      	beq.n	8000e78 <HAL_GPIO_Init+0x1e8>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0x1e4>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a3d      	ldr	r2, [pc, #244]	@ (8000f5c <HAL_GPIO_Init+0x2cc>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d101      	bne.n	8000e70 <HAL_GPIO_Init+0x1e0>
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e006      	b.n	8000e7e <HAL_GPIO_Init+0x1ee>
 8000e70:	2304      	movs	r3, #4
 8000e72:	e004      	b.n	8000e7e <HAL_GPIO_Init+0x1ee>
 8000e74:	2302      	movs	r3, #2
 8000e76:	e002      	b.n	8000e7e <HAL_GPIO_Init+0x1ee>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <HAL_GPIO_Init+0x1ee>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e80:	f002 0203 	and.w	r2, r2, #3
 8000e84:	0092      	lsls	r2, r2, #2
 8000e86:	4093      	lsls	r3, r2
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e8e:	492f      	ldr	r1, [pc, #188]	@ (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	3302      	adds	r3, #2
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	492c      	ldr	r1, [pc, #176]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	608b      	str	r3, [r1, #8]
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4928      	ldr	r1, [pc, #160]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ed0:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	4922      	ldr	r1, [pc, #136]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	60cb      	str	r3, [r1, #12]
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ede:	4b20      	ldr	r3, [pc, #128]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	491e      	ldr	r1, [pc, #120]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	4918      	ldr	r1, [pc, #96]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f06:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	4914      	ldr	r1, [pc, #80]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d021      	beq.n	8000f64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	490e      	ldr	r1, [pc, #56]	@ (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]
 8000f2c:	e021      	b.n	8000f72 <HAL_GPIO_Init+0x2e2>
 8000f2e:	bf00      	nop
 8000f30:	10320000 	.word	0x10320000
 8000f34:	10310000 	.word	0x10310000
 8000f38:	10220000 	.word	0x10220000
 8000f3c:	10210000 	.word	0x10210000
 8000f40:	10120000 	.word	0x10120000
 8000f44:	10110000 	.word	0x10110000
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	40010800 	.word	0x40010800
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	40011000 	.word	0x40011000
 8000f5c:	40011400 	.word	0x40011400
 8000f60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <HAL_GPIO_Init+0x304>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	4909      	ldr	r1, [pc, #36]	@ (8000f94 <HAL_GPIO_Init+0x304>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f74:	3301      	adds	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f47f ae8e 	bne.w	8000ca4 <HAL_GPIO_Init+0x14>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	372c      	adds	r7, #44	@ 0x2c
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40010400 	.word	0x40010400

08000f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa8:	787b      	ldrb	r3, [r7, #1]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fb4:	e003      	b.n	8000fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	041a      	lsls	r2, r3, #16
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	611a      	str	r2, [r3, #16]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e272      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 8087 	beq.w	80010f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fe8:	4b92      	ldr	r3, [pc, #584]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 030c 	and.w	r3, r3, #12
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d00c      	beq.n	800100e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff4:	4b8f      	ldr	r3, [pc, #572]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d112      	bne.n	8001026 <HAL_RCC_OscConfig+0x5e>
 8001000:	4b8c      	ldr	r3, [pc, #560]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800100c:	d10b      	bne.n	8001026 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100e:	4b89      	ldr	r3, [pc, #548]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d06c      	beq.n	80010f4 <HAL_RCC_OscConfig+0x12c>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d168      	bne.n	80010f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e24c      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800102e:	d106      	bne.n	800103e <HAL_RCC_OscConfig+0x76>
 8001030:	4b80      	ldr	r3, [pc, #512]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a7f      	ldr	r2, [pc, #508]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e02e      	b.n	800109c <HAL_RCC_OscConfig+0xd4>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0x98>
 8001046:	4b7b      	ldr	r3, [pc, #492]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a7a      	ldr	r2, [pc, #488]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800104c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b78      	ldr	r3, [pc, #480]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a77      	ldr	r2, [pc, #476]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001058:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e01d      	b.n	800109c <HAL_RCC_OscConfig+0xd4>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0xbc>
 800106a:	4b72      	ldr	r3, [pc, #456]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a71      	ldr	r2, [pc, #452]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b6f      	ldr	r3, [pc, #444]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a6e      	ldr	r2, [pc, #440]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e00b      	b.n	800109c <HAL_RCC_OscConfig+0xd4>
 8001084:	4b6b      	ldr	r3, [pc, #428]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a6a      	ldr	r2, [pc, #424]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800108a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b68      	ldr	r3, [pc, #416]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a67      	ldr	r2, [pc, #412]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800109a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc2a 	bl	80008fc <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fc26 	bl	80008fc <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	@ 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e200      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	4b5d      	ldr	r3, [pc, #372]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0xe4>
 80010ca:	e014      	b.n	80010f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fc16 	bl	80008fc <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fc12 	bl	80008fc <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	@ 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e1ec      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	4b53      	ldr	r3, [pc, #332]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x10c>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d063      	beq.n	80011ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001102:	4b4c      	ldr	r3, [pc, #304]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00b      	beq.n	8001126 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800110e:	4b49      	ldr	r3, [pc, #292]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b08      	cmp	r3, #8
 8001118:	d11c      	bne.n	8001154 <HAL_RCC_OscConfig+0x18c>
 800111a:	4b46      	ldr	r3, [pc, #280]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d116      	bne.n	8001154 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	4b43      	ldr	r3, [pc, #268]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d005      	beq.n	800113e <HAL_RCC_OscConfig+0x176>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d001      	beq.n	800113e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e1c0      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113e:	4b3d      	ldr	r3, [pc, #244]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4939      	ldr	r1, [pc, #228]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800114e:	4313      	orrs	r3, r2
 8001150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	e03a      	b.n	80011ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d020      	beq.n	800119e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115c:	4b36      	ldr	r3, [pc, #216]	@ (8001238 <HAL_RCC_OscConfig+0x270>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001162:	f7ff fbcb 	bl	80008fc <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116a:	f7ff fbc7 	bl	80008fc <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e1a1      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117c:	4b2d      	ldr	r3, [pc, #180]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001188:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4927      	ldr	r1, [pc, #156]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
 800119c:	e015      	b.n	80011ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119e:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <HAL_RCC_OscConfig+0x270>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fbaa 	bl	80008fc <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ac:	f7ff fba6 	bl	80008fc <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e180      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d03a      	beq.n	800124c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d019      	beq.n	8001212 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <HAL_RCC_OscConfig+0x274>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e4:	f7ff fb8a 	bl	80008fc <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ec:	f7ff fb86 	bl	80008fc <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e160      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <HAL_RCC_OscConfig+0x26c>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800120a:	2001      	movs	r0, #1
 800120c:	f000 face 	bl	80017ac <RCC_Delay>
 8001210:	e01c      	b.n	800124c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <HAL_RCC_OscConfig+0x274>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001218:	f7ff fb70 	bl	80008fc <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121e:	e00f      	b.n	8001240 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001220:	f7ff fb6c 	bl	80008fc <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d908      	bls.n	8001240 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e146      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	42420000 	.word	0x42420000
 800123c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001240:	4b92      	ldr	r3, [pc, #584]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1e9      	bne.n	8001220 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80a6 	beq.w	80013a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125e:	4b8b      	ldr	r3, [pc, #556]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10d      	bne.n	8001286 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b88      	ldr	r3, [pc, #544]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a87      	ldr	r2, [pc, #540]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001274:	61d3      	str	r3, [r2, #28]
 8001276:	4b85      	ldr	r3, [pc, #532]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001282:	2301      	movs	r3, #1
 8001284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001286:	4b82      	ldr	r3, [pc, #520]	@ (8001490 <HAL_RCC_OscConfig+0x4c8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d118      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001292:	4b7f      	ldr	r3, [pc, #508]	@ (8001490 <HAL_RCC_OscConfig+0x4c8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7e      	ldr	r2, [pc, #504]	@ (8001490 <HAL_RCC_OscConfig+0x4c8>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800129c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129e:	f7ff fb2d 	bl	80008fc <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a6:	f7ff fb29 	bl	80008fc <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b64      	cmp	r3, #100	@ 0x64
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e103      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	4b75      	ldr	r3, [pc, #468]	@ (8001490 <HAL_RCC_OscConfig+0x4c8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x312>
 80012cc:	4b6f      	ldr	r3, [pc, #444]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4a6e      	ldr	r2, [pc, #440]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6213      	str	r3, [r2, #32]
 80012d8:	e02d      	b.n	8001336 <HAL_RCC_OscConfig+0x36e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x334>
 80012e2:	4b6a      	ldr	r3, [pc, #424]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4a69      	ldr	r2, [pc, #420]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	6213      	str	r3, [r2, #32]
 80012ee:	4b67      	ldr	r3, [pc, #412]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4a66      	ldr	r2, [pc, #408]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	f023 0304 	bic.w	r3, r3, #4
 80012f8:	6213      	str	r3, [r2, #32]
 80012fa:	e01c      	b.n	8001336 <HAL_RCC_OscConfig+0x36e>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b05      	cmp	r3, #5
 8001302:	d10c      	bne.n	800131e <HAL_RCC_OscConfig+0x356>
 8001304:	4b61      	ldr	r3, [pc, #388]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4a60      	ldr	r2, [pc, #384]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	6213      	str	r3, [r2, #32]
 8001310:	4b5e      	ldr	r3, [pc, #376]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4a5d      	ldr	r2, [pc, #372]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6213      	str	r3, [r2, #32]
 800131c:	e00b      	b.n	8001336 <HAL_RCC_OscConfig+0x36e>
 800131e:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4a5a      	ldr	r2, [pc, #360]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	6213      	str	r3, [r2, #32]
 800132a:	4b58      	ldr	r3, [pc, #352]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4a57      	ldr	r2, [pc, #348]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001330:	f023 0304 	bic.w	r3, r3, #4
 8001334:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d015      	beq.n	800136a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fadd 	bl	80008fc <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff fad9 	bl	80008fc <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e0b1      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135c:	4b4b      	ldr	r3, [pc, #300]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0ee      	beq.n	8001346 <HAL_RCC_OscConfig+0x37e>
 8001368:	e014      	b.n	8001394 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff fac7 	bl	80008fc <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001370:	e00a      	b.n	8001388 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001372:	f7ff fac3 	bl	80008fc <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001380:	4293      	cmp	r3, r2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e09b      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001388:	4b40      	ldr	r3, [pc, #256]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1ee      	bne.n	8001372 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d105      	bne.n	80013a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800139a:	4b3c      	ldr	r3, [pc, #240]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a3b      	ldr	r2, [pc, #236]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8087 	beq.w	80014be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013b0:	4b36      	ldr	r3, [pc, #216]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d061      	beq.n	8001480 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d146      	bne.n	8001452 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c4:	4b33      	ldr	r3, [pc, #204]	@ (8001494 <HAL_RCC_OscConfig+0x4cc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ca:	f7ff fa97 	bl	80008fc <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d2:	f7ff fa93 	bl	80008fc <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e06d      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e4:	4b29      	ldr	r3, [pc, #164]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f8:	d108      	bne.n	800140c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013fa:	4b24      	ldr	r3, [pc, #144]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4921      	ldr	r1, [pc, #132]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140c:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a19      	ldr	r1, [r3, #32]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	430b      	orrs	r3, r1
 800141e:	491b      	ldr	r1, [pc, #108]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_RCC_OscConfig+0x4cc>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff fa67 	bl	80008fc <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff fa63 	bl	80008fc <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e03d      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x46a>
 8001450:	e035      	b.n	80014be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <HAL_RCC_OscConfig+0x4cc>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fa50 	bl	80008fc <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff fa4c 	bl	80008fc <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e026      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_RCC_OscConfig+0x4c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x498>
 800147e:	e01e      	b.n	80014be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d107      	bne.n	8001498 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e019      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
 800148c:	40021000 	.word	0x40021000
 8001490:	40007000 	.word	0x40007000
 8001494:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001498:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HAL_RCC_OscConfig+0x500>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0d0      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e0:	4b6a      	ldr	r3, [pc, #424]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d910      	bls.n	8001510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b67      	ldr	r3, [pc, #412]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 0207 	bic.w	r2, r3, #7
 80014f6:	4965      	ldr	r1, [pc, #404]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b63      	ldr	r3, [pc, #396]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0b8      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001528:	4b59      	ldr	r3, [pc, #356]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4a58      	ldr	r2, [pc, #352]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001532:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001540:	4b53      	ldr	r3, [pc, #332]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a52      	ldr	r2, [pc, #328]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800154a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154c:	4b50      	ldr	r3, [pc, #320]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	494d      	ldr	r1, [pc, #308]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d040      	beq.n	80015ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b47      	ldr	r3, [pc, #284]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d115      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e07f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158a:	4b41      	ldr	r3, [pc, #260]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e073      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159a:	4b3d      	ldr	r3, [pc, #244]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e06b      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015aa:	4b39      	ldr	r3, [pc, #228]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f023 0203 	bic.w	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4936      	ldr	r1, [pc, #216]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015bc:	f7ff f99e 	bl	80008fc <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c2:	e00a      	b.n	80015da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c4:	f7ff f99a 	bl	80008fc <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e053      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 020c 	and.w	r2, r3, #12
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d1eb      	bne.n	80015c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ec:	4b27      	ldr	r3, [pc, #156]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d210      	bcs.n	800161c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 0207 	bic.w	r2, r3, #7
 8001602:	4922      	ldr	r1, [pc, #136]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b20      	ldr	r3, [pc, #128]	@ (800168c <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e032      	b.n	8001682 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4916      	ldr	r1, [pc, #88]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	4313      	orrs	r3, r2
 8001638:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	490e      	ldr	r1, [pc, #56]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800165a:	f000 f821 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 800165e:	4602      	mov	r2, r0
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	490a      	ldr	r1, [pc, #40]	@ (8001694 <HAL_RCC_ClockConfig+0x1c8>)
 800166c:	5ccb      	ldrb	r3, [r1, r3]
 800166e:	fa22 f303 	lsr.w	r3, r2, r3
 8001672:	4a09      	ldr	r2, [pc, #36]	@ (8001698 <HAL_RCC_ClockConfig+0x1cc>)
 8001674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_RCC_ClockConfig+0x1d0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f8fc 	bl	8000878 <HAL_InitTick>

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40022000 	.word	0x40022000
 8001690:	40021000 	.word	0x40021000
 8001694:	08002ed0 	.word	0x08002ed0
 8001698:	20000004 	.word	0x20000004
 800169c:	20000008 	.word	0x20000008

080016a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x94>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d002      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x30>
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d003      	beq.n	80016d6 <HAL_RCC_GetSysClockFreq+0x36>
 80016ce:	e027      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x98>)
 80016d2:	613b      	str	r3, [r7, #16]
      break;
 80016d4:	e027      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	0c9b      	lsrs	r3, r3, #18
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	4a17      	ldr	r2, [pc, #92]	@ (800173c <HAL_RCC_GetSysClockFreq+0x9c>)
 80016e0:	5cd3      	ldrb	r3, [r2, r3]
 80016e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d010      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x94>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	0c5b      	lsrs	r3, r3, #17
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	4a11      	ldr	r2, [pc, #68]	@ (8001740 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016fa:	5cd3      	ldrb	r3, [r2, r3]
 80016fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x98>)
 8001702:	fb03 f202 	mul.w	r2, r3, r2
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e004      	b.n	800171a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a0c      	ldr	r2, [pc, #48]	@ (8001744 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	613b      	str	r3, [r7, #16]
      break;
 800171e:	e002      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x98>)
 8001722:	613b      	str	r3, [r7, #16]
      break;
 8001724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001726:	693b      	ldr	r3, [r7, #16]
}
 8001728:	4618      	mov	r0, r3
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	007a1200 	.word	0x007a1200
 800173c:	08002ee8 	.word	0x08002ee8
 8001740:	08002ef8 	.word	0x08002ef8
 8001744:	003d0900 	.word	0x003d0900

08001748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800174c:	4b02      	ldr	r3, [pc, #8]	@ (8001758 <HAL_RCC_GetHCLKFreq+0x10>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	20000004 	.word	0x20000004

0800175c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001760:	f7ff fff2 	bl	8001748 <HAL_RCC_GetHCLKFreq>
 8001764:	4602      	mov	r2, r0
 8001766:	4b05      	ldr	r3, [pc, #20]	@ (800177c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	4903      	ldr	r1, [pc, #12]	@ (8001780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001772:	5ccb      	ldrb	r3, [r1, r3]
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001778:	4618      	mov	r0, r3
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40021000 	.word	0x40021000
 8001780:	08002ee0 	.word	0x08002ee0

08001784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001788:	f7ff ffde 	bl	8001748 <HAL_RCC_GetHCLKFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	0adb      	lsrs	r3, r3, #11
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	4903      	ldr	r1, [pc, #12]	@ (80017a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800179a:	5ccb      	ldrb	r3, [r1, r3]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	08002ee0 	.word	0x08002ee0

080017ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <RCC_Delay+0x34>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <RCC_Delay+0x38>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0a5b      	lsrs	r3, r3, #9
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017c8:	bf00      	nop
  }
  while (Delay --);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	60fa      	str	r2, [r7, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f9      	bne.n	80017c8 <RCC_Delay+0x1c>
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	20000004 	.word	0x20000004
 80017e4:	10624dd3 	.word	0x10624dd3

080017e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e041      	b.n	800187e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d106      	bne.n	8001814 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe ff06 	bl	8000620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2202      	movs	r2, #2
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3304      	adds	r3, #4
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f000 f992 	bl	8001b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_TIM_PWM_Start+0x24>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	bf14      	ite	ne
 80018a4:	2301      	movne	r3, #1
 80018a6:	2300      	moveq	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	e022      	b.n	80018f2 <HAL_TIM_PWM_Start+0x6a>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d109      	bne.n	80018c6 <HAL_TIM_PWM_Start+0x3e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	bf14      	ite	ne
 80018be:	2301      	movne	r3, #1
 80018c0:	2300      	moveq	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	e015      	b.n	80018f2 <HAL_TIM_PWM_Start+0x6a>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d109      	bne.n	80018e0 <HAL_TIM_PWM_Start+0x58>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	e008      	b.n	80018f2 <HAL_TIM_PWM_Start+0x6a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	bf14      	ite	ne
 80018ec:	2301      	movne	r3, #1
 80018ee:	2300      	moveq	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e05e      	b.n	80019b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d104      	bne.n	800190a <HAL_TIM_PWM_Start+0x82>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001908:	e013      	b.n	8001932 <HAL_TIM_PWM_Start+0xaa>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d104      	bne.n	800191a <HAL_TIM_PWM_Start+0x92>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001918:	e00b      	b.n	8001932 <HAL_TIM_PWM_Start+0xaa>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d104      	bne.n	800192a <HAL_TIM_PWM_Start+0xa2>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001928:	e003      	b.n	8001932 <HAL_TIM_PWM_Start+0xaa>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2201      	movs	r2, #1
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f000 faf2 	bl	8001f24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a1e      	ldr	r2, [pc, #120]	@ (80019c0 <HAL_TIM_PWM_Start+0x138>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d107      	bne.n	800195a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001958:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a18      	ldr	r2, [pc, #96]	@ (80019c0 <HAL_TIM_PWM_Start+0x138>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00e      	beq.n	8001982 <HAL_TIM_PWM_Start+0xfa>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800196c:	d009      	beq.n	8001982 <HAL_TIM_PWM_Start+0xfa>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a14      	ldr	r2, [pc, #80]	@ (80019c4 <HAL_TIM_PWM_Start+0x13c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d004      	beq.n	8001982 <HAL_TIM_PWM_Start+0xfa>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <HAL_TIM_PWM_Start+0x140>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d111      	bne.n	80019a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b06      	cmp	r3, #6
 8001992:	d010      	beq.n	80019b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a4:	e007      	b.n	80019b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0201 	orr.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40000800 	.word	0x40000800

080019cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e0ae      	b.n	8001b48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	f200 809f 	bhi.w	8001b38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80019fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001a00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a35 	.word	0x08001a35
 8001a04:	08001b39 	.word	0x08001b39
 8001a08:	08001b39 	.word	0x08001b39
 8001a0c:	08001b39 	.word	0x08001b39
 8001a10:	08001a75 	.word	0x08001a75
 8001a14:	08001b39 	.word	0x08001b39
 8001a18:	08001b39 	.word	0x08001b39
 8001a1c:	08001b39 	.word	0x08001b39
 8001a20:	08001ab7 	.word	0x08001ab7
 8001a24:	08001b39 	.word	0x08001b39
 8001a28:	08001b39 	.word	0x08001b39
 8001a2c:	08001b39 	.word	0x08001b39
 8001a30:	08001af7 	.word	0x08001af7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f8ea 	bl	8001c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699a      	ldr	r2, [r3, #24]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0208 	orr.w	r2, r2, #8
 8001a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0204 	bic.w	r2, r2, #4
 8001a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6999      	ldr	r1, [r3, #24]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	619a      	str	r2, [r3, #24]
      break;
 8001a72:	e064      	b.n	8001b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f930 	bl	8001ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6999      	ldr	r1, [r3, #24]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	021a      	lsls	r2, r3, #8
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	619a      	str	r2, [r3, #24]
      break;
 8001ab4:	e043      	b.n	8001b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68b9      	ldr	r1, [r7, #8]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 f979 	bl	8001db4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	69da      	ldr	r2, [r3, #28]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0208 	orr.w	r2, r2, #8
 8001ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0204 	bic.w	r2, r2, #4
 8001ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69d9      	ldr	r1, [r3, #28]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	61da      	str	r2, [r3, #28]
      break;
 8001af4:	e023      	b.n	8001b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 f9c3 	bl	8001e88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69da      	ldr	r2, [r3, #28]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69d9      	ldr	r1, [r3, #28]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	021a      	lsls	r2, r3, #8
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	61da      	str	r2, [r3, #28]
      break;
 8001b36:	e002      	b.n	8001b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a29      	ldr	r2, [pc, #164]	@ (8001c08 <TIM_Base_SetConfig+0xb8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d00b      	beq.n	8001b80 <TIM_Base_SetConfig+0x30>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b6e:	d007      	beq.n	8001b80 <TIM_Base_SetConfig+0x30>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a26      	ldr	r2, [pc, #152]	@ (8001c0c <TIM_Base_SetConfig+0xbc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d003      	beq.n	8001b80 <TIM_Base_SetConfig+0x30>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a25      	ldr	r2, [pc, #148]	@ (8001c10 <TIM_Base_SetConfig+0xc0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d108      	bne.n	8001b92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a1c      	ldr	r2, [pc, #112]	@ (8001c08 <TIM_Base_SetConfig+0xb8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00b      	beq.n	8001bb2 <TIM_Base_SetConfig+0x62>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ba0:	d007      	beq.n	8001bb2 <TIM_Base_SetConfig+0x62>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <TIM_Base_SetConfig+0xbc>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <TIM_Base_SetConfig+0x62>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a18      	ldr	r2, [pc, #96]	@ (8001c10 <TIM_Base_SetConfig+0xc0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d108      	bne.n	8001bc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a07      	ldr	r2, [pc, #28]	@ (8001c08 <TIM_Base_SetConfig+0xb8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d103      	bne.n	8001bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	615a      	str	r2, [r3, #20]
}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	40012c00 	.word	0x40012c00
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40000800 	.word	0x40000800

08001c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f023 0201 	bic.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f023 0303 	bic.w	r3, r3, #3
 8001c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f023 0302 	bic.w	r3, r3, #2
 8001c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cdc <TIM_OC1_SetConfig+0xc8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d10c      	bne.n	8001c8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f023 0308 	bic.w	r3, r3, #8
 8001c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f023 0304 	bic.w	r3, r3, #4
 8001c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a13      	ldr	r2, [pc, #76]	@ (8001cdc <TIM_OC1_SetConfig+0xc8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d111      	bne.n	8001cb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	621a      	str	r2, [r3, #32]
}
 8001cd0:	bf00      	nop
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40012c00 	.word	0x40012c00

08001ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f023 0210 	bic.w	r2, r3, #16
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f023 0320 	bic.w	r3, r3, #32
 8001d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001db0 <TIM_OC2_SetConfig+0xd0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d10d      	bne.n	8001d5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a14      	ldr	r2, [pc, #80]	@ (8001db0 <TIM_OC2_SetConfig+0xd0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d113      	bne.n	8001d8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	621a      	str	r2, [r3, #32]
}
 8001da6:	bf00      	nop
 8001da8:	371c      	adds	r7, #28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	40012c00 	.word	0x40012c00

08001db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e84 <TIM_OC3_SetConfig+0xd0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10d      	bne.n	8001e2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a14      	ldr	r2, [pc, #80]	@ (8001e84 <TIM_OC3_SetConfig+0xd0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d113      	bne.n	8001e5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	621a      	str	r2, [r3, #32]
}
 8001e78:	bf00      	nop
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40012c00 	.word	0x40012c00

08001e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	031b      	lsls	r3, r3, #12
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8001f20 <TIM_OC4_SetConfig+0x98>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d109      	bne.n	8001efc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	019b      	lsls	r3, r3, #6
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	621a      	str	r2, [r3, #32]
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	40012c00 	.word	0x40012c00

08001f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2201      	movs	r2, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a1a      	ldr	r2, [r3, #32]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	401a      	ands	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	621a      	str	r2, [r3, #32]
}
 8001f62:	bf00      	nop
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e046      	b.n	8002012 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a16      	ldr	r2, [pc, #88]	@ (800201c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00e      	beq.n	8001fe6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd0:	d009      	beq.n	8001fe6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a12      	ldr	r2, [pc, #72]	@ (8002020 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d004      	beq.n	8001fe6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a10      	ldr	r2, [pc, #64]	@ (8002024 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10c      	bne.n	8002000 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40012c00 	.word	0x40012c00
 8002020:	40000400 	.word	0x40000400
 8002024:	40000800 	.word	0x40000800

08002028 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002040:	2302      	movs	r3, #2
 8002042:	e03d      	b.n	80020c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4313      	orrs	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4313      	orrs	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e042      	b.n	8002162 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d106      	bne.n	80020f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7fe fae7 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2224      	movs	r2, #36	@ 0x24
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800210c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fcd4 	bl	8002abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002122:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002132:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002142:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	4613      	mov	r3, r2
 8002176:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b20      	cmp	r3, #32
 8002182:	d112      	bne.n	80021aa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_UART_Receive_IT+0x26>
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e00b      	b.n	80021ac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	461a      	mov	r2, r3
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fab6 	bl	8002712 <UART_Start_Receive_IT>
 80021a6:	4603      	mov	r3, r0
 80021a8:	e000      	b.n	80021ac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80021aa:	2302      	movs	r3, #2
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b0ba      	sub	sp, #232	@ 0xe8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80021f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10f      	bne.n	800221a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_UART_IRQHandler+0x66>
 8002206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fb93 	bl	800293e <UART_Receive_IT>
      return;
 8002218:	e25b      	b.n	80026d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800221a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80de 	beq.w	80023e0 <HAL_UART_IRQHandler+0x22c>
 8002224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002234:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80d1 	beq.w	80023e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800223e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_UART_IRQHandler+0xae>
 800224a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800224e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_UART_IRQHandler+0xd2>
 800226e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	f043 0202 	orr.w	r2, r3, #2
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_UART_IRQHandler+0xf6>
 8002292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	f043 0204 	orr.w	r2, r3, #4
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d011      	beq.n	80022da <HAL_UART_IRQHandler+0x126>
 80022b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d2:	f043 0208 	orr.w	r2, r3, #8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 81f2 	beq.w	80026c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_UART_IRQHandler+0x14e>
 80022f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fb1e 	bl	800293e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <HAL_UART_IRQHandler+0x17a>
 8002326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d04f      	beq.n	80023ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fa28 	bl	8002784 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d041      	beq.n	80023c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3314      	adds	r3, #20
 8002348:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002350:	e853 3f00 	ldrex	r3, [r3]
 8002354:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002358:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800235c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002360:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3314      	adds	r3, #20
 800236a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800236e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002372:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800237a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800237e:	e841 2300 	strex	r3, r2, [r1]
 8002382:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1d9      	bne.n	8002342 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d013      	beq.n	80023be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239a:	4a7e      	ldr	r2, [pc, #504]	@ (8002594 <HAL_UART_IRQHandler+0x3e0>)
 800239c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fbfc 	bl	8000ba0 <HAL_DMA_Abort_IT>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023b8:	4610      	mov	r0, r2
 80023ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023bc:	e00e      	b.n	80023dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f993 	bl	80026ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c4:	e00a      	b.n	80023dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f98f 	bl	80026ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023cc:	e006      	b.n	80023dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f98b 	bl	80026ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80023da:	e175      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023dc:	bf00      	nop
    return;
 80023de:	e173      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	f040 814f 	bne.w	8002688 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8148 	beq.w	8002688 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 8141 	beq.w	8002688 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80b6 	beq.w	8002598 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8145 	beq.w	80026cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800244a:	429a      	cmp	r2, r3
 800244c:	f080 813e 	bcs.w	80026cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002456:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b20      	cmp	r3, #32
 8002460:	f000 8088 	beq.w	8002574 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	330c      	adds	r3, #12
 800246a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002472:	e853 3f00 	ldrex	r3, [r3]
 8002476:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800247a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800247e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002482:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	330c      	adds	r3, #12
 800248c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002490:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002494:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002498:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800249c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80024a0:	e841 2300 	strex	r3, r2, [r1]
 80024a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80024a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1d9      	bne.n	8002464 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3314      	adds	r3, #20
 80024b6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ba:	e853 3f00 	ldrex	r3, [r3]
 80024be:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80024c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024c2:	f023 0301 	bic.w	r3, r3, #1
 80024c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	3314      	adds	r3, #20
 80024d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024d4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80024d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024da:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80024dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80024e0:	e841 2300 	strex	r3, r2, [r1]
 80024e4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80024e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1e1      	bne.n	80024b0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3314      	adds	r3, #20
 80024f2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024f6:	e853 3f00 	ldrex	r3, [r3]
 80024fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80024fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002502:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3314      	adds	r3, #20
 800250c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002510:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002512:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002514:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002516:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002518:	e841 2300 	strex	r3, r2, [r1]
 800251c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800251e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1e3      	bne.n	80024ec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800253c:	e853 3f00 	ldrex	r3, [r3]
 8002540:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002544:	f023 0310 	bic.w	r3, r3, #16
 8002548:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	330c      	adds	r3, #12
 8002552:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002556:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002558:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800255c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800255e:	e841 2300 	strex	r3, r2, [r1]
 8002562:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1e3      	bne.n	8002532 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fadb 	bl	8000b2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002582:	b29b      	uxth	r3, r3
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	b29b      	uxth	r3, r3
 8002588:	4619      	mov	r1, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8b6 	bl	80026fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002590:	e09c      	b.n	80026cc <HAL_UART_IRQHandler+0x518>
 8002592:	bf00      	nop
 8002594:	08002849 	.word	0x08002849
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 808e 	beq.w	80026d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80025b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8089 	beq.w	80026d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c8:	e853 3f00 	ldrex	r3, [r3]
 80025cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80025ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	330c      	adds	r3, #12
 80025de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80025e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80025e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025ea:	e841 2300 	strex	r3, r2, [r1]
 80025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80025f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1e3      	bne.n	80025be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3314      	adds	r3, #20
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	e853 3f00 	ldrex	r3, [r3]
 8002604:	623b      	str	r3, [r7, #32]
   return(result);
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3314      	adds	r3, #20
 8002616:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800261a:	633a      	str	r2, [r7, #48]	@ 0x30
 800261c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002622:	e841 2300 	strex	r3, r2, [r1]
 8002626:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1e3      	bne.n	80025f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	330c      	adds	r3, #12
 8002642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	e853 3f00 	ldrex	r3, [r3]
 800264a:	60fb      	str	r3, [r7, #12]
   return(result);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0310 	bic.w	r3, r3, #16
 8002652:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	330c      	adds	r3, #12
 800265c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002660:	61fa      	str	r2, [r7, #28]
 8002662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002664:	69b9      	ldr	r1, [r7, #24]
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	e841 2300 	strex	r3, r2, [r1]
 800266c:	617b      	str	r3, [r7, #20]
   return(result);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e3      	bne.n	800263c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800267a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f83b 	bl	80026fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002686:	e023      	b.n	80026d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800268c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <HAL_UART_IRQHandler+0x4f4>
 8002694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f8e5 	bl	8002870 <UART_Transmit_IT>
    return;
 80026a6:	e014      	b.n	80026d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00e      	beq.n	80026d2 <HAL_UART_IRQHandler+0x51e>
 80026b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f924 	bl	800290e <UART_EndTransmit_IT>
    return;
 80026c6:	e004      	b.n	80026d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80026c8:	bf00      	nop
 80026ca:	e002      	b.n	80026d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80026cc:	bf00      	nop
 80026ce:	e000      	b.n	80026d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80026d0:	bf00      	nop
  }
}
 80026d2:	37e8      	adds	r7, #232	@ 0xe8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	4613      	mov	r3, r2
 800271e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	88fa      	ldrh	r2, [r7, #6]
 800272a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	88fa      	ldrh	r2, [r7, #6]
 8002730:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2222      	movs	r2, #34	@ 0x22
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002756:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0220 	orr.w	r2, r2, #32
 8002776:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002784:	b480      	push	{r7}
 8002786:	b095      	sub	sp, #84	@ 0x54
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	330c      	adds	r3, #12
 8002792:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002796:	e853 3f00 	ldrex	r3, [r3]
 800279a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800279c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80027ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027b4:	e841 2300 	strex	r3, r2, [r1]
 80027b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1e5      	bne.n	800278c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3314      	adds	r3, #20
 80027c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	e853 3f00 	ldrex	r3, [r3]
 80027ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027e8:	e841 2300 	strex	r3, r2, [r1]
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1e5      	bne.n	80027c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d119      	bne.n	8002830 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	e853 3f00 	ldrex	r3, [r3]
 800280a:	60bb      	str	r3, [r7, #8]
   return(result);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f023 0310 	bic.w	r3, r3, #16
 8002812:	647b      	str	r3, [r7, #68]	@ 0x44
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800281c:	61ba      	str	r2, [r7, #24]
 800281e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002820:	6979      	ldr	r1, [r7, #20]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	e841 2300 	strex	r3, r2, [r1]
 8002828:	613b      	str	r3, [r7, #16]
   return(result);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e5      	bne.n	80027fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800283e:	bf00      	nop
 8002840:	3754      	adds	r7, #84	@ 0x54
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff ff41 	bl	80026ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b21      	cmp	r3, #33	@ 0x21
 8002882:	d13e      	bne.n	8002902 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800288c:	d114      	bne.n	80028b8 <UART_Transmit_IT+0x48>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d110      	bne.n	80028b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	1c9a      	adds	r2, r3, #2
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	621a      	str	r2, [r3, #32]
 80028b6:	e008      	b.n	80028ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	1c59      	adds	r1, r3, #1
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6211      	str	r1, [r2, #32]
 80028c2:	781a      	ldrb	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4619      	mov	r1, r3
 80028d8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e000      	b.n	8002904 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002902:	2302      	movs	r3, #2
  }
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002924:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff fed2 	bl	80026d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b08c      	sub	sp, #48	@ 0x30
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b22      	cmp	r3, #34	@ 0x22
 8002950:	f040 80ae 	bne.w	8002ab0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800295c:	d117      	bne.n	800298e <UART_Receive_IT+0x50>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d113      	bne.n	800298e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002966:	2300      	movs	r3, #0
 8002968:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	b29b      	uxth	r3, r3
 8002978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800297c:	b29a      	uxth	r2, r3
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002986:	1c9a      	adds	r2, r3, #2
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	629a      	str	r2, [r3, #40]	@ 0x28
 800298c:	e026      	b.n	80029dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a0:	d007      	beq.n	80029b2 <UART_Receive_IT+0x74>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10a      	bne.n	80029c0 <UART_Receive_IT+0x82>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e008      	b.n	80029d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	4619      	mov	r1, r3
 80029ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d15d      	bne.n	8002aac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0220 	bic.w	r2, r2, #32
 80029fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d135      	bne.n	8002aa2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	e853 3f00 	ldrex	r3, [r3]
 8002a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f023 0310 	bic.w	r3, r3, #16
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a5c:	623a      	str	r2, [r7, #32]
 8002a5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a60:	69f9      	ldr	r1, [r7, #28]
 8002a62:	6a3a      	ldr	r2, [r7, #32]
 8002a64:	e841 2300 	strex	r3, r2, [r1]
 8002a68:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e5      	bne.n	8002a3c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d10a      	bne.n	8002a94 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a98:	4619      	mov	r1, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff fe2e 	bl	80026fc <HAL_UARTEx_RxEventCallback>
 8002aa0:	e002      	b.n	8002aa8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fd fb52 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e002      	b.n	8002ab2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3730      	adds	r7, #48	@ 0x30
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002af6:	f023 030c 	bic.w	r3, r3, #12
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bd0 <UART_SetConfig+0x114>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d103      	bne.n	8002b2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b24:	f7fe fe2e 	bl	8001784 <HAL_RCC_GetPCLK2Freq>
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	e002      	b.n	8002b32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b2c:	f7fe fe16 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 8002b30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009a      	lsls	r2, r3, #2
 8002b3c:	441a      	add	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	4a22      	ldr	r2, [pc, #136]	@ (8002bd4 <UART_SetConfig+0x118>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	0119      	lsls	r1, r3, #4
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	009a      	lsls	r2, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b68:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd4 <UART_SetConfig+0x118>)
 8002b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2064      	movs	r0, #100	@ 0x64
 8002b72:	fb00 f303 	mul.w	r3, r0, r3
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	3332      	adds	r3, #50	@ 0x32
 8002b7c:	4a15      	ldr	r2, [pc, #84]	@ (8002bd4 <UART_SetConfig+0x118>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b88:	4419      	add	r1, r3
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	009a      	lsls	r2, r3, #2
 8002b94:	441a      	add	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <UART_SetConfig+0x118>)
 8002ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2064      	movs	r0, #100	@ 0x64
 8002baa:	fb00 f303 	mul.w	r3, r0, r3
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	3332      	adds	r3, #50	@ 0x32
 8002bb4:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <UART_SetConfig+0x118>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	f003 020f 	and.w	r2, r3, #15
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	440a      	add	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40013800 	.word	0x40013800
 8002bd4:	51eb851f 	.word	0x51eb851f

08002bd8 <car_control>:

Motor_Typedef motor_left;
Motor_Typedef motor_right;

void car_control(CarState car_state, uint8_t speed)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	460a      	mov	r2, r1
 8002be2:	71fb      	strb	r3, [r7, #7]
 8002be4:	4613      	mov	r3, r2
 8002be6:	71bb      	strb	r3, [r7, #6]
	switch(car_state)
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d84b      	bhi.n	8002c86 <car_control+0xae>
 8002bee:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf4 <car_control+0x1c>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c09 	.word	0x08002c09
 8002bf8:	08002c1f 	.word	0x08002c1f
 8002bfc:	08002c39 	.word	0x08002c39
 8002c00:	08002c53 	.word	0x08002c53
 8002c04:	08002c6d 	.word	0x08002c6d
	{
	case CAR_STOP_STATE: // Xe dừng
		motor_control(&motor_left, MOTOR_STOP, 0);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4820      	ldr	r0, [pc, #128]	@ (8002c90 <car_control+0xb8>)
 8002c0e:	f000 f867 	bl	8002ce0 <motor_control>
		motor_control(&motor_right, MOTOR_STOP, 0);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2100      	movs	r1, #0
 8002c16:	481f      	ldr	r0, [pc, #124]	@ (8002c94 <car_control+0xbc>)
 8002c18:	f000 f862 	bl	8002ce0 <motor_control>
		break;
 8002c1c:	e034      	b.n	8002c88 <car_control+0xb0>
	case CAR_FORWARD_STATE: // Xe tiến
		motor_control(&motor_left, MOTOR_CW, speed);
 8002c1e:	79bb      	ldrb	r3, [r7, #6]
 8002c20:	461a      	mov	r2, r3
 8002c22:	2101      	movs	r1, #1
 8002c24:	481a      	ldr	r0, [pc, #104]	@ (8002c90 <car_control+0xb8>)
 8002c26:	f000 f85b 	bl	8002ce0 <motor_control>
		motor_control(&motor_right, MOTOR_CW, speed);
 8002c2a:	79bb      	ldrb	r3, [r7, #6]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2101      	movs	r1, #1
 8002c30:	4818      	ldr	r0, [pc, #96]	@ (8002c94 <car_control+0xbc>)
 8002c32:	f000 f855 	bl	8002ce0 <motor_control>
		break;
 8002c36:	e027      	b.n	8002c88 <car_control+0xb0>
	case CAR_BACKWARD_STATE: // Xe lùi
		motor_control(&motor_left, MOTOR_CCW, speed);
 8002c38:	79bb      	ldrb	r3, [r7, #6]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4814      	ldr	r0, [pc, #80]	@ (8002c90 <car_control+0xb8>)
 8002c40:	f000 f84e 	bl	8002ce0 <motor_control>
		motor_control(&motor_right, MOTOR_CCW, speed);
 8002c44:	79bb      	ldrb	r3, [r7, #6]
 8002c46:	461a      	mov	r2, r3
 8002c48:	2102      	movs	r1, #2
 8002c4a:	4812      	ldr	r0, [pc, #72]	@ (8002c94 <car_control+0xbc>)
 8002c4c:	f000 f848 	bl	8002ce0 <motor_control>
		break;
 8002c50:	e01a      	b.n	8002c88 <car_control+0xb0>
	case CAR_LEFT_STATE: // Xe rẽ trái
		motor_control(&motor_left, MOTOR_CCW, speed);
 8002c52:	79bb      	ldrb	r3, [r7, #6]
 8002c54:	461a      	mov	r2, r3
 8002c56:	2102      	movs	r1, #2
 8002c58:	480d      	ldr	r0, [pc, #52]	@ (8002c90 <car_control+0xb8>)
 8002c5a:	f000 f841 	bl	8002ce0 <motor_control>

		motor_control(&motor_right, MOTOR_CW, speed);
 8002c5e:	79bb      	ldrb	r3, [r7, #6]
 8002c60:	461a      	mov	r2, r3
 8002c62:	2101      	movs	r1, #1
 8002c64:	480b      	ldr	r0, [pc, #44]	@ (8002c94 <car_control+0xbc>)
 8002c66:	f000 f83b 	bl	8002ce0 <motor_control>
		break;
 8002c6a:	e00d      	b.n	8002c88 <car_control+0xb0>
	case CAR_RIGHT_STATE: // Xe rẽ phải
		motor_control(&motor_left, MOTOR_CW, speed);
 8002c6c:	79bb      	ldrb	r3, [r7, #6]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2101      	movs	r1, #1
 8002c72:	4807      	ldr	r0, [pc, #28]	@ (8002c90 <car_control+0xb8>)
 8002c74:	f000 f834 	bl	8002ce0 <motor_control>
		motor_control(&motor_right, MOTOR_CCW, speed);
 8002c78:	79bb      	ldrb	r3, [r7, #6]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <car_control+0xbc>)
 8002c80:	f000 f82e 	bl	8002ce0 <motor_control>
		break;
 8002c84:	e000      	b.n	8002c88 <car_control+0xb0>
	default:
		break;
 8002c86:	bf00      	nop
	}
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200000c4 	.word	0x200000c4
 8002c94:	200000d8 	.word	0x200000d8

08002c98 <car_init>:

void car_init(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	6078      	str	r0, [r7, #4]

	motor_init(&motor_left, GPIOB, GPIO_PIN_14, htim, TIM_CHANNEL_1);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002caa:	490a      	ldr	r1, [pc, #40]	@ (8002cd4 <car_init+0x3c>)
 8002cac:	480a      	ldr	r0, [pc, #40]	@ (8002cd8 <car_init+0x40>)
 8002cae:	f000 f868 	bl	8002d82 <motor_init>
	motor_init(&motor_right, GPIOB, GPIO_PIN_15, htim, TIM_CHANNEL_2);
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002cbc:	4905      	ldr	r1, [pc, #20]	@ (8002cd4 <car_init+0x3c>)
 8002cbe:	4807      	ldr	r0, [pc, #28]	@ (8002cdc <car_init+0x44>)
 8002cc0:	f000 f85f 	bl	8002d82 <motor_init>
	car_control(CAR_STOP_STATE, 0);
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7ff ff86 	bl	8002bd8 <car_control>
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40010c00 	.word	0x40010c00
 8002cd8:	200000c4 	.word	0x200000c4
 8002cdc:	200000d8 	.word	0x200000d8

08002ce0 <motor_control>:
#include "Motor.h"
#include "Pwm.h"
void motor_control(Motor_Typedef *motor, MotorState state ,uint8_t speed)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	70fb      	strb	r3, [r7, #3]
 8002cec:	4613      	mov	r3, r2
 8002cee:	70bb      	strb	r3, [r7, #2]
	motor->speed = speed;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	78ba      	ldrb	r2, [r7, #2]
 8002cf4:	745a      	strb	r2, [r3, #17]
	switch(state)
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d029      	beq.n	8002d50 <motor_control+0x70>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	dc3c      	bgt.n	8002d7a <motor_control+0x9a>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <motor_control+0x2a>
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d011      	beq.n	8002d2c <motor_control+0x4c>
	case MOTOR_CCW:
		HAL_GPIO_WritePin(motor->io_port, motor->io_pin , GPIO_PIN_SET);
		pwm_set_duty(motor->tim, motor->tim_channel, 100 - motor->speed);
		break;
	}
}
 8002d08:	e037      	b.n	8002d7a <motor_control+0x9a>
		HAL_GPIO_WritePin(motor->io_port, motor->io_pin , GPIO_PIN_RESET);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	889b      	ldrh	r3, [r3, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fe f93f 	bl	8000f98 <HAL_GPIO_WritePin>
		pwm_set_duty(motor->tim, motor->tim_channel, 0);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6898      	ldr	r0, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	4619      	mov	r1, r3
 8002d26:	f000 f84d 	bl	8002dc4 <pwm_set_duty>
		break;
 8002d2a:	e026      	b.n	8002d7a <motor_control+0x9a>
		HAL_GPIO_WritePin(motor->io_port, motor->io_pin , GPIO_PIN_RESET);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	889b      	ldrh	r3, [r3, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	4619      	mov	r1, r3
 8002d38:	f7fe f92e 	bl	8000f98 <HAL_GPIO_WritePin>
		pwm_set_duty(motor->tim, motor->tim_channel, motor->speed);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6898      	ldr	r0, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68d9      	ldr	r1, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7c5b      	ldrb	r3, [r3, #17]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f000 f83b 	bl	8002dc4 <pwm_set_duty>
		break;
 8002d4e:	e014      	b.n	8002d7a <motor_control+0x9a>
		HAL_GPIO_WritePin(motor->io_port, motor->io_pin , GPIO_PIN_SET);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	889b      	ldrh	r3, [r3, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f7fe f91c 	bl	8000f98 <HAL_GPIO_WritePin>
		pwm_set_duty(motor->tim, motor->tim_channel, 100 - motor->speed);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6898      	ldr	r0, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68d9      	ldr	r1, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	7c5b      	ldrb	r3, [r3, #17]
 8002d6c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	f000 f826 	bl	8002dc4 <pwm_set_duty>
		break;
 8002d78:	bf00      	nop
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <motor_init>:
void motor_init(Motor_Typedef *motor, GPIO_TypeDef *io_port, uint16_t io_pin, TIM_HandleTypeDef *tim, uint32_t tim_channel)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
	motor->io_port = io_port;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	601a      	str	r2, [r3, #0]
	motor->io_pin = io_pin;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	88fa      	ldrh	r2, [r7, #6]
 8002d9c:	809a      	strh	r2, [r3, #4]
	motor->tim = tim;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	609a      	str	r2, [r3, #8]
	motor->tim_channel = tim_channel;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(motor->tim, motor->tim_channel);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4619      	mov	r1, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	f7fe fd67 	bl	8001888 <HAL_TIM_PWM_Start>
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <pwm_set_duty>:
#include "Pwm.h"

void pwm_set_duty(TIM_HandleTypeDef *tim, uint32_t channel, uint8_t duty)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	71fb      	strb	r3, [r7, #7]
	uint16_t ccr = (uint16_t)duty*(tim->Instance->ARR)/100;
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	4a1f      	ldr	r2, [pc, #124]	@ (8002e5c <pwm_set_duty+0x98>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	82fb      	strh	r3, [r7, #22]
	switch(channel)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d830      	bhi.n	8002e50 <pwm_set_duty+0x8c>
 8002dee:	a201      	add	r2, pc, #4	@ (adr r2, 8002df4 <pwm_set_duty+0x30>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e29 	.word	0x08002e29
 8002df8:	08002e51 	.word	0x08002e51
 8002dfc:	08002e51 	.word	0x08002e51
 8002e00:	08002e51 	.word	0x08002e51
 8002e04:	08002e33 	.word	0x08002e33
 8002e08:	08002e51 	.word	0x08002e51
 8002e0c:	08002e51 	.word	0x08002e51
 8002e10:	08002e51 	.word	0x08002e51
 8002e14:	08002e3d 	.word	0x08002e3d
 8002e18:	08002e51 	.word	0x08002e51
 8002e1c:	08002e51 	.word	0x08002e51
 8002e20:	08002e51 	.word	0x08002e51
 8002e24:	08002e47 	.word	0x08002e47
	{
	case TIM_CHANNEL_1:
		tim->Instance->CCR1 = ccr;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	8afa      	ldrh	r2, [r7, #22]
 8002e2e:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8002e30:	e00e      	b.n	8002e50 <pwm_set_duty+0x8c>
	case TIM_CHANNEL_2:
		tim->Instance->CCR2 = ccr;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	8afa      	ldrh	r2, [r7, #22]
 8002e38:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8002e3a:	e009      	b.n	8002e50 <pwm_set_duty+0x8c>
	case TIM_CHANNEL_3:
		tim->Instance->CCR3 = ccr;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	8afa      	ldrh	r2, [r7, #22]
 8002e42:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8002e44:	e004      	b.n	8002e50 <pwm_set_duty+0x8c>
	case TIM_CHANNEL_4:
		tim->Instance->CCR4 = ccr;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	8afa      	ldrh	r2, [r7, #22]
 8002e4c:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8002e4e:	bf00      	nop
	}
}
 8002e50:	bf00      	nop
 8002e52:	371c      	adds	r7, #28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	51eb851f 	.word	0x51eb851f

08002e60 <memset>:
 8002e60:	4603      	mov	r3, r0
 8002e62:	4402      	add	r2, r0
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d100      	bne.n	8002e6a <memset+0xa>
 8002e68:	4770      	bx	lr
 8002e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e6e:	e7f9      	b.n	8002e64 <memset+0x4>

08002e70 <__libc_init_array>:
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	2600      	movs	r6, #0
 8002e74:	4d0c      	ldr	r5, [pc, #48]	@ (8002ea8 <__libc_init_array+0x38>)
 8002e76:	4c0d      	ldr	r4, [pc, #52]	@ (8002eac <__libc_init_array+0x3c>)
 8002e78:	1b64      	subs	r4, r4, r5
 8002e7a:	10a4      	asrs	r4, r4, #2
 8002e7c:	42a6      	cmp	r6, r4
 8002e7e:	d109      	bne.n	8002e94 <__libc_init_array+0x24>
 8002e80:	f000 f81a 	bl	8002eb8 <_init>
 8002e84:	2600      	movs	r6, #0
 8002e86:	4d0a      	ldr	r5, [pc, #40]	@ (8002eb0 <__libc_init_array+0x40>)
 8002e88:	4c0a      	ldr	r4, [pc, #40]	@ (8002eb4 <__libc_init_array+0x44>)
 8002e8a:	1b64      	subs	r4, r4, r5
 8002e8c:	10a4      	asrs	r4, r4, #2
 8002e8e:	42a6      	cmp	r6, r4
 8002e90:	d105      	bne.n	8002e9e <__libc_init_array+0x2e>
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
 8002e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e98:	4798      	blx	r3
 8002e9a:	3601      	adds	r6, #1
 8002e9c:	e7ee      	b.n	8002e7c <__libc_init_array+0xc>
 8002e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea2:	4798      	blx	r3
 8002ea4:	3601      	adds	r6, #1
 8002ea6:	e7f2      	b.n	8002e8e <__libc_init_array+0x1e>
 8002ea8:	08002efc 	.word	0x08002efc
 8002eac:	08002efc 	.word	0x08002efc
 8002eb0:	08002efc 	.word	0x08002efc
 8002eb4:	08002f00 	.word	0x08002f00

08002eb8 <_init>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	bf00      	nop
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr

08002ec4 <_fini>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	bf00      	nop
 8002ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eca:	bc08      	pop	{r3}
 8002ecc:	469e      	mov	lr, r3
 8002ece:	4770      	bx	lr
